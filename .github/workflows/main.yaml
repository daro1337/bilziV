name: CI bilziv

on:
  push:
    tags:
        - "v*" # Push events on tags

env:
    DOCKER_LOGIN: daro1337
    appName: bilziv

jobs:
    build-images:
        strategy:
          matrix:
            app: [www, haproxy]

        name: Build ${{ matrix.app }} image
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Get tag
              id: get_tag
              run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ env.DOCKER_LOGIN }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and push
              uses: docker/build-push-action@v3
              with:
                context: ${{ matrix.app }}
                push: true
                tags: ${{ env.DOCKER_LOGIN }}/${{ env.appName }}-${{ matrix.app }}:${{ steps.get_tag.outputs.VERSION }}, ${{ env.DOCKER_LOGIN }}/${{ env.appName }}-${{ matrix.app }}:latest

    test-env:
        needs: build-images
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Get tag
              id: get_tag
              run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

            - name: Generate Self-Signed certs
              run: |
                openssl req -x509 -newkey rsa:4096 -sha256 \
                  -days 3650 -nodes \
                  -keyout server.key \
                  -out server.crt \
                  -subj "/CN=localhost" \
                  -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"

            - name: Create PEM
              run: mkdir -p haproxy/ssl/ && cat server.crt server.key > haproxy/ssl/ssl.pem

            - name: Start env
              run: docker-compose  up -d

            - name: TEST env verbose
              run: curl -vk https://localhost:443/

            - name: TEST env for string
              run: curl -ks https://localhost:443/ |jq .msg | grep -q 'Hello World!'; echo $?
